"""initial schema"""

# revision identifiers, used by Alembic.
revision = 'ab4342204e10'
down_revision = None
branch_labels = None
depends_on = None

from alembic import op  # noqa: E402
import sqlalchemy as sa  # noqa: E402
import sqlmodel  # noqa: E402
import pgvector.sqlalchemy  # noqa: E402


def upgrade() -> None:
    # Create pgvector extension
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timezone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('google_oauth_tokens', sa.JSON(), nullable=False),
    sa.Column('hubspot_oauth_tokens', sa.JSON(), nullable=False),
    sa.Column('google_history_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_google_history_id'), 'user', ['google_history_id'], unique=False)
    op.create_index(op.f('ix_user_is_active'), 'user', ['is_active'], unique=False)
    op.create_table('contact',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('hubspot_id', sa.String(length=255), nullable=True),
    sa.Column('external_source', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('primary_email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('secondary_emails', sa.JSON(), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('company', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('lifecycle_stage', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('properties_json', sa.JSON(), nullable=False),
    sa.Column('last_synced_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('hubspot_id')
    )
    op.create_index('ix_contact_external_source', 'contact', ['external_source'], unique=False)
    op.create_index('ix_contact_hubspot_id', 'contact', ['hubspot_id'], unique=False)
    op.create_index('ix_contact_last_synced_at', 'contact', ['last_synced_at'], unique=False)
    op.create_index('ix_contact_primary_email', 'contact', ['primary_email'], unique=False)
    op.create_index(op.f('ix_contact_user_id'), 'contact', ['user_id'], unique=False)
    op.create_table('email',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('gmail_id', sa.String(length=255), nullable=False),
    sa.Column('thread_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('history_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('subject', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('snippet', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('body_plain', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('body_html', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('sender', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('reply_to', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('to_recipients', sa.JSON(), nullable=False),
    sa.Column('cc_recipients', sa.JSON(), nullable=False),
    sa.Column('bcc_recipients', sa.JSON(), nullable=False),
    sa.Column('labels', sa.JSON(), nullable=False),
    sa.Column('headers_json', sa.JSON(), nullable=False),
    sa.Column('direction', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('received_at', sa.DateTime(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('external_source', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('gmail_id')
    )
    op.create_index('ix_email_direction', 'email', ['direction'], unique=False)
    op.create_index('ix_email_external_source', 'email', ['external_source'], unique=False)
    op.create_index('ix_email_history_id', 'email', ['history_id'], unique=False)
    op.create_index('ix_email_is_read', 'email', ['is_read'], unique=False)
    op.create_index('ix_email_received_at', 'email', ['received_at'], unique=False)
    op.create_index('ix_email_sender', 'email', ['sender'], unique=False)
    op.create_index('ix_email_sent_at', 'email', ['sent_at'], unique=False)
    op.create_index('ix_email_thread_id', 'email', ['thread_id'], unique=False)
    op.create_index(op.f('ix_email_user_id'), 'email', ['user_id'], unique=False)
    op.create_table('memoryrule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('rule_text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_triggered_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_memoryrule_is_active'), 'memoryrule', ['is_active'], unique=False)
    op.create_index(op.f('ix_memoryrule_last_triggered_at'), 'memoryrule', ['last_triggered_at'], unique=False)
    op.create_index(op.f('ix_memoryrule_priority'), 'memoryrule', ['priority'], unique=False)
    op.create_index(op.f('ix_memoryrule_user_id'), 'memoryrule', ['user_id'], unique=False)
    op.create_table('task',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('task_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('max_attempts', sa.Integer(), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=False),
    sa.Column('result', sa.JSON(), nullable=False),
    sa.Column('scheduled_for', sa.DateTime(), nullable=True),
    sa.Column('locked_at', sa.DateTime(), nullable=True),
    sa.Column('last_attempt_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_task_completed_at', 'task', ['completed_at'], unique=False)
    op.create_index('ix_task_locked_at', 'task', ['locked_at'], unique=False)
    op.create_index(op.f('ix_task_priority'), 'task', ['priority'], unique=False)
    op.create_index('ix_task_scheduled_for', 'task', ['scheduled_for'], unique=False)
    op.create_index(op.f('ix_task_state'), 'task', ['state'], unique=False)
    op.create_index(op.f('ix_task_task_type'), 'task', ['task_type'], unique=False)
    op.create_index(op.f('ix_task_user_id'), 'task', ['user_id'], unique=False)
    op.create_table('vectoritem',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('source_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('source_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('chunk_index', sa.Integer(), nullable=True),
    sa.Column('chunk_count', sa.Integer(), nullable=True),
    sa.Column('text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tokens', sa.Integer(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('metadata_json', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_vector_item_created_at', 'vectoritem', ['created_at'], unique=False)
    op.create_index('ix_vector_item_source', 'vectoritem', ['source_type', 'source_id'], unique=False)
    op.create_index(op.f('ix_vectoritem_id'), 'vectoritem', ['id'], unique=False)
    op.create_index(op.f('ix_vectoritem_source_type'), 'vectoritem', ['source_type'], unique=False)
    op.create_index(op.f('ix_vectoritem_user_id'), 'vectoritem', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_vectoritem_user_id'), table_name='vectoritem')
    op.drop_index(op.f('ix_vectoritem_source_type'), table_name='vectoritem')
    op.drop_index(op.f('ix_vectoritem_id'), table_name='vectoritem')
    op.drop_index('ix_vector_item_source', table_name='vectoritem')
    op.drop_index('ix_vector_item_created_at', table_name='vectoritem')
    op.drop_table('vectoritem')
    op.drop_index(op.f('ix_task_user_id'), table_name='task')
    op.drop_index(op.f('ix_task_task_type'), table_name='task')
    op.drop_index(op.f('ix_task_state'), table_name='task')
    op.drop_index('ix_task_scheduled_for', table_name='task')
    op.drop_index(op.f('ix_task_priority'), table_name='task')
    op.drop_index('ix_task_locked_at', table_name='task')
    op.drop_index('ix_task_completed_at', table_name='task')
    op.drop_table('task')
    op.drop_index(op.f('ix_memoryrule_user_id'), table_name='memoryrule')
    op.drop_index(op.f('ix_memoryrule_priority'), table_name='memoryrule')
    op.drop_index(op.f('ix_memoryrule_last_triggered_at'), table_name='memoryrule')
    op.drop_index(op.f('ix_memoryrule_is_active'), table_name='memoryrule')
    op.drop_table('memoryrule')
    op.drop_index(op.f('ix_email_user_id'), table_name='email')
    op.drop_index('ix_email_thread_id', table_name='email')
    op.drop_index('ix_email_sent_at', table_name='email')
    op.drop_index('ix_email_sender', table_name='email')
    op.drop_index('ix_email_received_at', table_name='email')
    op.drop_index('ix_email_is_read', table_name='email')
    op.drop_index('ix_email_history_id', table_name='email')
    op.drop_index('ix_email_external_source', table_name='email')
    op.drop_index('ix_email_direction', table_name='email')
    op.drop_table('email')
    op.drop_index(op.f('ix_contact_user_id'), table_name='contact')
    op.drop_index('ix_contact_primary_email', table_name='contact')
    op.drop_index('ix_contact_last_synced_at', table_name='contact')
    op.drop_index('ix_contact_hubspot_id', table_name='contact')
    op.drop_index('ix_contact_external_source', table_name='contact')
    op.drop_table('contact')
    op.drop_index(op.f('ix_user_is_active'), table_name='user')
    op.drop_index(op.f('ix_user_google_history_id'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###
    
    # Drop pgvector extension (only if no other tables use it)
    op.execute("DROP EXTENSION IF EXISTS vector")
