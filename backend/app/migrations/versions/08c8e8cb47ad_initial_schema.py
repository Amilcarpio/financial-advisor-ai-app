"""initial schema"""

# revision identifiers, used by Alembic.
revision = '08c8e8cb47ad'
down_revision = None
branch_labels = None
depends_on = None

from alembic import op  # noqa: E402
import sqlalchemy as sa  # noqa: E402
from pgvector.sqlalchemy import Vector  # noqa: E402
import pgvector.sqlalchemy  # noqa: E402


def upgrade() -> None:
    # Create pgvector extension
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('timezone', sa.String(), nullable=True),
    sa.Column('google_oauth_tokens', sa.JSON(), nullable=False),
    sa.Column('hubspot_oauth_tokens', sa.JSON(), nullable=False),
    sa.Column('google_history_id', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_google_history_id'), ['google_history_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_is_active'), ['is_active'], unique=False)

    op.create_table('contact',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('hubspot_id', sa.String(length=255), nullable=True),
    sa.Column('external_source', sa.String(), nullable=False),
    sa.Column('primary_email', sa.String(), nullable=True),
    sa.Column('secondary_emails', sa.JSON(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('company', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('lifecycle_stage', sa.String(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('properties_json', sa.JSON(), nullable=False),
    sa.Column('last_synced_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('hubspot_id')
    )
    with op.batch_alter_table('contact', schema=None) as batch_op:
        batch_op.create_index('ix_contact_external_source', ['external_source'], unique=False)
        batch_op.create_index('ix_contact_hubspot_id', ['hubspot_id'], unique=False)
        batch_op.create_index('ix_contact_last_synced_at', ['last_synced_at'], unique=False)
        batch_op.create_index('ix_contact_primary_email', ['primary_email'], unique=False)
        batch_op.create_index(batch_op.f('ix_contact_user_id'), ['user_id'], unique=False)

    op.create_table('email',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('gmail_id', sa.String(length=255), nullable=False),
    sa.Column('thread_id', sa.String(), nullable=True),
    sa.Column('history_id', sa.String(), nullable=True),
    sa.Column('subject', sa.String(), nullable=True),
    sa.Column('snippet', sa.String(), nullable=True),
    sa.Column('body_plain', sa.String(), nullable=True),
    sa.Column('body_html', sa.String(), nullable=True),
    sa.Column('sender', sa.String(), nullable=True),
    sa.Column('reply_to', sa.String(), nullable=True),
    sa.Column('to_recipients', sa.JSON(), nullable=False),
    sa.Column('cc_recipients', sa.JSON(), nullable=False),
    sa.Column('bcc_recipients', sa.JSON(), nullable=False),
    sa.Column('labels', sa.JSON(), nullable=False),
    sa.Column('headers_json', sa.JSON(), nullable=False),
    sa.Column('direction', sa.String(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('received_at', sa.DateTime(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('external_source', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('gmail_id')
    )
    with op.batch_alter_table('email', schema=None) as batch_op:
        batch_op.create_index('ix_email_direction', ['direction'], unique=False)
        batch_op.create_index('ix_email_external_source', ['external_source'], unique=False)
        batch_op.create_index('ix_email_history_id', ['history_id'], unique=False)
        batch_op.create_index('ix_email_is_read', ['is_read'], unique=False)
        batch_op.create_index('ix_email_received_at', ['received_at'], unique=False)
        batch_op.create_index('ix_email_sender', ['sender'], unique=False)
        batch_op.create_index('ix_email_sent_at', ['sent_at'], unique=False)
        batch_op.create_index('ix_email_thread_id', ['thread_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_email_user_id'), ['user_id'], unique=False)

    op.create_table('memoryrule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('rule_text', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_triggered_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('memoryrule', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_memoryrule_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_memoryrule_last_triggered_at'), ['last_triggered_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_memoryrule_priority'), ['priority'], unique=False)
        batch_op.create_index(batch_op.f('ix_memoryrule_user_id'), ['user_id'], unique=False)

    op.create_table('task',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('task_type', sa.String(), nullable=False),
    sa.Column('state', sa.String(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('max_attempts', sa.Integer(), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=False),
    sa.Column('result', sa.JSON(), nullable=False),
    sa.Column('scheduled_for', sa.DateTime(), nullable=True),
    sa.Column('locked_at', sa.DateTime(), nullable=True),
    sa.Column('last_attempt_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_error', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.create_index('ix_task_completed_at', ['completed_at'], unique=False)
        batch_op.create_index('ix_task_locked_at', ['locked_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_task_priority'), ['priority'], unique=False)
        batch_op.create_index('ix_task_scheduled_for', ['scheduled_for'], unique=False)
        batch_op.create_index(batch_op.f('ix_task_state'), ['state'], unique=False)
        batch_op.create_index(batch_op.f('ix_task_task_type'), ['task_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_task_user_id'), ['user_id'], unique=False)

    op.create_table('vectoritem',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('source_type', sa.String(), nullable=False),
    sa.Column('source_id', sa.String(), nullable=True),
    sa.Column('chunk_index', sa.Integer(), nullable=True),
    sa.Column('chunk_count', sa.Integer(), nullable=True),
    sa.Column('text', sa.String(), nullable=False),
    sa.Column('tokens', sa.Integer(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('metadata_json', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('vectoritem', schema=None) as batch_op:
        batch_op.create_index('ix_vector_item_created_at', ['created_at'], unique=False)
        batch_op.create_index('ix_vector_item_source', ['source_type', 'source_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_vectoritem_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_vectoritem_source_type'), ['source_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_vectoritem_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('vectoritem', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_vectoritem_user_id'))
        batch_op.drop_index(batch_op.f('ix_vectoritem_source_type'))
        batch_op.drop_index(batch_op.f('ix_vectoritem_id'))
        batch_op.drop_index('ix_vector_item_source')
        batch_op.drop_index('ix_vector_item_created_at')

    op.drop_table('vectoritem')
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_task_user_id'))
        batch_op.drop_index(batch_op.f('ix_task_task_type'))
        batch_op.drop_index(batch_op.f('ix_task_state'))
        batch_op.drop_index('ix_task_scheduled_for')
        batch_op.drop_index(batch_op.f('ix_task_priority'))
        batch_op.drop_index('ix_task_locked_at')
        batch_op.drop_index('ix_task_completed_at')

    op.drop_table('task')
    with op.batch_alter_table('memoryrule', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_memoryrule_user_id'))
        batch_op.drop_index(batch_op.f('ix_memoryrule_priority'))
        batch_op.drop_index(batch_op.f('ix_memoryrule_last_triggered_at'))
        batch_op.drop_index(batch_op.f('ix_memoryrule_is_active'))

    op.drop_table('memoryrule')
    with op.batch_alter_table('email', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_email_user_id'))
        batch_op.drop_index('ix_email_thread_id')
        batch_op.drop_index('ix_email_sent_at')
        batch_op.drop_index('ix_email_sender')
        batch_op.drop_index('ix_email_received_at')
        batch_op.drop_index('ix_email_is_read')
        batch_op.drop_index('ix_email_history_id')
        batch_op.drop_index('ix_email_external_source')
        batch_op.drop_index('ix_email_direction')

    op.drop_table('email')
    with op.batch_alter_table('contact', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_contact_user_id'))
        batch_op.drop_index('ix_contact_primary_email')
        batch_op.drop_index('ix_contact_last_synced_at')
        batch_op.drop_index('ix_contact_hubspot_id')
        batch_op.drop_index('ix_contact_external_source')

    op.drop_table('contact')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_is_active'))
        batch_op.drop_index(batch_op.f('ix_user_google_history_id'))
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    
    # Drop pgvector extension
    op.execute("DROP EXTENSION IF EXISTS vector")
    # ### end Alembic commands ###
